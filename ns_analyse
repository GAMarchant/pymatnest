#!/usr/bin/env python

import sys, math, optparse
import numpy as np
import ns_analyse

p = optparse.OptionParser(usage='%prog [options] <infile> [ <infile> ... ]')
p.add_option('-M','--T_min', action='store', help="""Minimum temperature""",type='float')
p.add_option('-D','--dT', action='store', help="""Temperature step""",type='float')
p.add_option('-n','--n_T', action='store', help="""Number of temperatures""",type='int')
p.add_option('-k','--kB', action='store', help="""Boltzmann constant (defaults to eV/K)""", type='float', default=8.6173324e-5)
p.add_option('-a','--accurate_sum', action='store_true', help="""use more accurate sum (math.fsum)""")
p.add_option('-v','--verbose', action='store_true', help="""Verbose output (for debugging)""")
p.add_option('-p','--profile', action='store_true', help="""do profiling""")
p.add_option('-s','--skip', action='store', help="""number of lines to skip""", type='int', default=0)

opt, args = p.parse_args()

T_min = opt.T_min
dT = opt.dT
n_T = opt.n_T
k_Boltzmann = opt.kB
debug = opt.verbose
profile = opt.profile

if opt.accurate_sum:
    sum=math.fsum
else:
    sum=np.sum

(n_walkers, n_cull, n_Extra_DOF, Es) = ns_analyse.read_inputs(args, skip=opt.skip)

# check this: a = N_w/(N_w+N_c)
print "# n_walkers ",n_walkers," n_cull ",n_cull," simple log(alpha) ",math.log(float(n_walkers)) - math.log(float(n_walkers+n_cull))

Es -= np.amin(Es)

def analyse(log_a, Es, T):
    Z_term = ns_analyse.calc_Z_terms(1/(k_Boltzmann*T), log_a, Es)

    if debug:
        for i in range(len(Z_term)):
            print "Z_term ", T, Es[i], Z_term[i]
        print "Z_term"
        print "Z_term"

    Z = sum(Z_term)

    U_pot = sum(Z_term*Es)/Z
    U = n_Extra_DOF/(2.0*beta) + U_pot

    Cv = n_Extra_DOF*k_Boltzmann/2.0 + beta*beta * (sum(Z_term * Es**2)/Z - U_pot**2)

    log_Z = math.log(Z)+shift

    return (log_Z, U, Cv)

print "# T      log_Z(T)               U(T)          Cv(T)"
#      0.05 1.88949677673e-75 8.88841272769 56975.5011109

log_a = ns_analyse.calc_log_a(len(Es), k_Boltzmann, n_walkers, n_cull)
for i_T in range(n_T):
    T = T_min + i_T * dT
    if opt.profile and i_T == 0:
        import cProfile
        cProfile.run('(log_Z, U, Cv) = analyse(log_a, Es, T)','ns_analyse.stats')
    else:
        (log_Z, U, Cv) = analyse(log_a, Es, T)
    print T, log_Z, U, Cv
