#!/usr/bin/env python

import sys, math, optparse, fileinput
import numpy as np

p = optparse.OptionParser(usage='%prog [options] <infile> [ <infile> ... ]')
p.add_option('-M','--T_min', action='store', help="""Minimum temperature""",type='float')
p.add_option('-D','--dT', action='store', help="""Temperature step""",type='float')
p.add_option('-n','--n_T', action='store', help="""Number of temperatures""",type='int')
p.add_option('-k','--kB', action='store', help="""Boltzmann constant (defaults to eV/K)""", type='float', default=8.6173324e-5)
p.add_option('-v','--verbose', action='store_true', help="""Verbose output (for debugging)""")

opt, args = p.parse_args()

T_min = opt.T_min
dT = opt.dT
n_T = opt.n_T
k_Boltzmann = opt.kB
debug = opt.verbose

inputs = fileinput.input(files=args)

(n_walkers, n_cull, n_Extra_DOF) = inputs.readline().split()
n_walkers = int(n_walkers)
n_cull = int(n_cull)
n_Extra_DOF = int(n_Extra_DOF)

# check this
alpha = float(n_walkers)/float(n_walkers+n_cull)

print "# n_walkers ",n_walkers," n_cull ",n_cull," alpha ",alpha

Es=[]
for line in inputs:
   (n_iter, E) = line.split()
   Es.append(float(E))

Es = np.array(Es)
Es -= np.amin(Es)



def analyse(Es, T):
   n_iter = len(Es)
   beta = 1.0/(k_Boltzmann*T)
   log_a = math.log(alpha)

   shift = np.amax(np.arange(1,n_iter+1)*log_a - beta*Es[:])
   Z_term = np.exp(np.arange(1,n_iter+1)*log_a - beta*Es[:] - shift)

   if debug:
      for i in range(len(Z_term)):
	 print "Z_term ", T, Es[i], Z_term[i]
      print "Z_term"
      print "Z_term"

   Z = math.fsum(Z_term)

   U_pot = math.fsum(Z_term*Es)/Z
   U = n_Extra_DOF/(2.0*beta) + U_pot

   Cv = n_Extra_DOF*k_Boltzmann/2.0 + beta*beta * (math.fsum(Z_term * Es**2)/Z - U_pot**2)

   return (Z, U, Cv)

print "# T      Z(T)               U(T)          Cv(T)"
#      0.05 1.88949677673e-75 8.88841272769 56975.5011109

for i_T in range(n_T):
   T = T_min + i_T * dT
   (Z, U, Cv) = analyse(Es, T)
   print T, Z, U, Cv
