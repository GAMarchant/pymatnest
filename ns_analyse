#!/usr/bin/env python

import sys, math
import numpy as np

if len(sys.argv) < 5 or len(sys.argv) > 7:
   sys.stderr.write("Usage: %s infile T_min dT n_T [kB, default to eV/K] [debug]\n" % sys.argv[0])
   sys.exit(1)

k_Boltzmann = 8.6173324e-5 # eV/K
if sys.argv[1] == '-' or sys.argv[1] == 'stdin':
   infile=sys.stdin
else:
   infile = open(sys.argv[1])
T_min = float(sys.argv[2])
dT = float(sys.argv[3])
n_T = int(sys.argv[4])
if len(sys.argv) == 6:
   if sys.argv[5] == "debug":
      debug=True
   else:
      debug=False
   k_Boltzmann = float(sys.argv[5])

if len(sys.argv) == 7:
   k_Boltzmann = float(sys.argv[5])
   if sys.argv[6] == "debug":
      debug=True
   else:
      sys.stderr.write("Unknown argument '%s'\n" % sys.argv[6])
      sys.exit(2)


(n_walkers, n_cull, n_DOF) = infile.readline().split()
n_walkers = int(n_walkers)
n_cull = int(n_cull)
n_DOF = int(n_DOF)

Es=[]
for line in infile.readlines():
   (n_iter, E) = line.split()
   Es.append(float(E))

Es = np.array(Es)
Es -= np.amin(Es)

# check this
alpha = float(n_walkers)/float(n_walkers+n_cull)

print "# n_walkers ",n_walkers," n_cull ",n_cull," alpha ",alpha

def analyse(Es, T):
   log_a = math.log(alpha)
   log_1_min_a = math.log(1.0-alpha)
   beta = 1.0/(k_Boltzmann*T)
   log_1_over_kTsq = math.log(beta)-math.log(T)
   log_w = np.zeros( (len(Es)) )
   for i_E in range(len(Es)):
      n = int(i_E/n_cull)
      log_w[i_E] = n*log_a + log_1_min_a

   # Z = sum_n (a^n - a^(n+1)) exp(-beta E_j)
   #   = sum_n a^n (1-a) exp(-beta E_j)
   #   = sum_n exp(n log(a)+log(1-a))exp(-beta E_j)
   #   = sum_n exp(n log(a)+log(1-a)-beta E_j)
   Z_term = np.exp(log_w - beta*Es)
   # U = 3N/2 beta + 1/Z sum_n w_n E_n exp(-beta E_n)
   #   = 3N/2 beta + 1/Z sum_n exp( log(w) + log(E) - beta E)
   U_term = Es*Z_term
   # Cv = 3N/2 k + 1/Z^2 [ sum_n w_n E_n exp(-beta E_n)/kT^2 ] [ \sum_n w_n E_n exp(-beta E_n) ] + 1/Z [ sum_n w_n E_n^2 exp(-beta E_n)/kT^2 ]
   Cv_term_1 = Es * np.exp(log_w - beta*Es + log_1_over_kTsq)
   Cv_term_2 = Es*Cv_term_1

   if debug:
      for i in range(len(Z_term)):
	 print "Z_term ", T, Es[i], Z_term[i]
      print "Z_term"
      print "Z_term"
   Z = math.fsum(Z_term)

   U_term_sum = math.fsum(U_term)
   U = n_DOF/(2.0*beta) + U_term_sum/Z

   Cv = n_DOF*k_Boltzmann/2.0 - U_term_sum*math.fsum(Cv_term_1)/Z**2 + math.fsum(Cv_term_2)/Z

   return (Z, U, Cv)

print "# T      Z(T)               U(T)          Cv(T)"
#      0.05 1.88949677673e-75 8.88841272769 56975.5011109

for i_T in range(n_T):
   T = T_min + i_T * dT
   (Z, U, Cv) = analyse(Es, T)
   print T, Z, U, Cv
