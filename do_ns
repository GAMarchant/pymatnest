#!/usr/bin/env python

import sys

if len(sys.argv) != 1:
  sys.stderr.write("Usage: %s < input\n" % sys.argv[0])
  sys.stderr.write("input:\n")
  sys.stderr.write("start_file=path_to_file.xyz (MANDATORY)\n")
  sys.stderr.write("n_walkers=int (MANDATORY)\n")
  sys.stderr.write("n_cull=int (MANDATORY)\n")
  sys.stderr.write("n_iter=int (MANDATORY)\n")

  sys.stderr.write("QUIP_pot_args=str (MANDATORY)\n")
  sys.stderr.write("QUIP_pot_params_file=str (MANDATORY)\n")

  sys.stderr.write("MC_atom_n_steps_expected=int\n")
  sys.stderr.write("MC_atom_n_steps=int (if not specified, set from expected #)\n")
  sys.stderr.write("MC_atom_step_size=int\n")

  sys.stderr.write("MD_atom_n_steps_expected=int\n")
  sys.stderr.write("MD_atom_n_steps=int (if not specified, set from expected #)\n")
  sys.stderr.write("MD_atom_timestep=float\n")
  sys.stderr.write("MD_atom_energy_fuzz=float\n")

  sys.stderr.write("profile=rank_to_profile\n")
  sys.stderr.write("2D=[ T | F ]\n")
  sys.stderr.write("debug=debug_level (<= 0 for no debugging tests/prints)\n")
  sys.stderr.write("delta_random_seed=seed_shift (< 0 for seed from /dev/urandom)\n")

import re, numpy as np, math
import ase
try:
   import quippy
   have_quippy=True
except:
   have_quippy=False

try:
   from mpi4py import MPI
   comm = MPI.COMM_WORLD
   rank = comm.Get_rank()
   size = comm.Get_size()
except:
   comm = None
   rank = 0
   size = 1

if comm is not None and rank == 0:
   print "comm ", comm, " size ", size

def exit_error(message, stat):
   sys.stderr.write(message)
   try:
      comm.Abort(stat)
   except:
      pass
   sys.exit(stat)

# read inputs on root, then bcast
if rank == 0:
   lines=sys.stdin.readlines()
   if len(lines) == 0:
      try:
	 infile=open("ns_inputs","r")
      except:
	 exit_error("Failed to read ns_inputs file\n", 1)
      lines = infile.readlines()
   args={}
   if rank == 0:
      for line in lines:
	 if re.match("\s*(#.*)?$", line):
	  continue
	 matches = re.match("\s*(\S+)\s*=\s*(.*\S)", line)
	 args[matches.group(1)] = matches.group(2)
else:
   args = None
if comm is not None:
   args = comm.bcast(args,root=0)

# parse args

# convert from strings to actual args
ns_args={}
try:
  ns_args['start_file'] = args.pop('start_file')
except:
  exit_error("need starting position file start_file\n",1)
try:
  ns_args['n_walkers'] = int(args.pop('n_walkers'))
except:
  exit_error("need number of walkers n_walkers\n",1)
try:
  ns_args['n_cull'] = int(args.pop('n_cull'))
except:
  exit_error("need number to cull n_cull\n",1)
try:
  ns_args['n_iter'] = int(args.pop('n_iter'))
except:
  exit_error("need number of NS iterations n_iter\n",1)
try:
  ns_args['QUIP_pot_args'] = args.pop('QUIP_pot_args')
except:
  exit_error("need QUIP potential args QUIP_pot_args\n",1)
try:
  ns_args['QUIP_pot_params_file'] = args.pop('QUIP_pot_params_file')
except:
  exit_error("need QUIP potential params file QUIP_pot_params_file\n",1)

ns_args['profile'] = int(args.pop('profile', -1))
ns_args['debug'] = int(args.pop('debug', -1))
ns_args['delta_random_seed'] = int(args.pop('delta_random_seed', -1))

movement_args={}
movement_args['MC_atom_n_steps_expected'] = int(args.pop('MC_atom_n_steps_expected', 0))
movement_args['MC_atom_n_steps'] = int(args.pop('MC_atom_n_steps', 0))
movement_args['MC_atom_step_size'] = float(args.pop('MC_atom_step_size', 0.0))
movement_args['MD_atom_n_steps_expected'] = int(args.pop('MD_atom_n_steps_expected', 0))
movement_args['MD_atom_n_steps'] = int(args.pop('MD_atom_n_steps', 0))
movement_args['MD_atom_timestep'] = float(args.pop('MD_atom_timestep', 0.0))
movement_args['MD_atom_energy_fuzz'] = float(args.pop('MD_atom_energy_fuzz', 1.0e-12))
movement_args['2D'] = args.pop('2D', "F") in [ "t", "T", "true", "True", "TRUE", "1" ]

confining_pot_args={}
confining_pot_args['mag'] = float(args.pop('confining_potential_mag', 0.0))

if 'QUIP_pot_params_file' in ns_args:
   if not have_quippy:
      exit_error("Got QUIP_pot_params but no quippy module\n", 3)
   try:
      if rank == 0:
	 ns_args['QUIP_pot_params'] = open(ns_args['QUIP_pot_params_file'],"r").read()
      else:
	 ns_args['QUIP_pot_params'] = None
      if comm is not None:
	 ns_args['QUIP_pot_params'] = comm.bcast(ns_args['QUIP_pot_params'], root=0)
   except:
      exit_error("Failed to read params file '%s'\n" % ns_args['QUIP_pot_params_file'], 1)
else:
   sys.stderr.write("Got no *_pot_params_file")

if len(args) > 0:
  exit_error(str(args)+"\nUnknown arguments read in\n", 2)

if rank == 0:
   print "ns_args ",ns_args
   print "movement_args ",movement_args

# initialise potential
if have_quippy:
   pot = quippy.Potential(ns_args['QUIP_pot_args'], param_str=ns_args['QUIP_pot_params'], calculation_always_required=True)
else:
   exit_error("Need some non-quippy way of initializing calculator\n",3)

# read initial config
if have_quippy:
   init_atoms = None
   if rank == 0:
      init_atoms = quippy.Atoms(ns_args['start_file'])
   if comm is not None:
      init_atoms = comm.bcast(init_atoms, root=0)
   init_atoms.set_cutoff(pot.cutoff(), cutoff_skin=1.0)
else:
   exit_error("need some non-quippy way of reading input configuration\n",3)

# clone initial config into array of walkers
walkers=[]
rank_of_walker = [0]*ns_args['n_walkers']
if size <= 1:
   n_walkers = ns_args['n_walkers']
else:
   n_walkers_per_task = ns_args['n_walkers']/size
   if n_walkers_per_task*size != ns_args['n_walkers']:
      exit_error("number of walkers %d not divisible by number of MPI processes %d\n" % (ns_args['n_walkers'], size), 5)
   last_walker = 0
   for i_rank in range(size):
      first_walker = last_walker
      last_walker = last_walker + n_walkers_per_task
      if last_walker > ns_args['n_walkers']:
	 last_walker = ns_args['n_walkers']
      if i_rank == rank:
	 n_walkers = last_walker-first_walker
	 my_first_walker = first_walker
	 my_last_walker = last_walker
      if last_walker > first_walker:
	 rank_of_walker[first_walker:last_walker] = [i_rank]*(last_walker-first_walker)
for i_walker in range(n_walkers):
  walkers.append(init_atoms.copy())
for at in walkers:
   at.set_calculator(pot)

n_cull = ns_args['n_cull']

def eval_energy(at, PE_only=False):
  # potential
  if have_quippy:
      energy = at.get_potential_energy()
  else:
      sys.stderr.write("Need some non-quippy way to do eval_energy")

  # confining
  if confining_pot_args['mag'] > 0.0:
      energy += confining_pot_args['mag']*(np.linalg.norm(at.pos)**2)

  if not PE_only:
     # kinetic
     velocities = at.get_velocities()
     masses = at.get_masses()
     if velocities is not None and masses is not None:
	 energy += at.get_kinetic_energy()

  return energy

def quippy_propagate(at, dt, n_steps):
   old_velo = at.get_velocities()
   if old_velo is not None:
      if not hasattr(at, 'velo'):
	 at.add_property('velo', 0.0, n_cols=3)
      at.velo[:,:] = old_velo.transpose()/(ase.units.Ang/ase.units.fs)
   ds=quippy.DynamicalSystem(at)
   ds.run(pot, dt=dt/ase.units.fs, n_steps=n_steps, summary_interval=0, connect_interval=1, write_interval=0, save_interval=0)
   at.set_velocities(at.velo.transpose()*(ase.units.Ang/ase.units.fs))

def do_MD_atom_walk(at, movement_args, Emax):

   if confining_pot_args['mag'] > 0.0:
      exit_error("Can't do_MD_atom_walk with confining potential > 0.0\n", 4)

   #DEBUG print rank, ": do_MD_atom_walk with Emax ", Emax

   #DEBUG print rank, ": initial positions ", at.get_positions()[0]
   #DEBUG if at.get_velocities() is not None:
      #DEBUG print rank, ": initial velo ", at.get_velocities()[0]
   #DEBUG else:
      #DEBUG print rank, ": initial velo ", None
   #DEBUG print rank, ": initial energy ", at.get_potential_energy(), at.get_kinetic_energy(), at.get_potential_energy()+ at.get_kinetic_energy()

   old_pos = at.get_positions()
   old_velo = at.get_velocities()

   masses = at.get_masses()
   unit_rv = np.random.standard_normal( (len(at), 3) )
   unit_rv /= np.linalg.norm(unit_rv)
   mag_rv = np.random.uniform()**(1.0/(3.0*len(at)-1.0))
   pot_energy = at.get_potential_energy()
   # from Baldock thesis Eq. 11.10 
   #     p^{**} = r \mathbf{S} \hat{\mathbf{r}}
   # and 11.11 
   #     S_{ij} = \delta_{ij} (2 m_i [ E_{lim} - U(q))])^{1/2}
   # p_i = r (2 m_i)^{1/2} (E-U)^{1/2} \hat{r}_i
   # v_i = p_i / m_i = r (2/m)^{1/2} (E-U)^{1/2} \hat{r}_i
   velocities = mag_rv * np.sqrt(2.0/np.array([masses,]*3).transpose()) * np.sqrt((Emax-pot_energy)) * unit_rv
   at.set_velocities(velocities)

   #DEBUG print rank, ": masses for KE ",masses
   #DEBUG print rank, ": velocities for KE ",at.get_velocities()
   #DEBUG print rank, ": KE ",at.get_kinetic_energy()
   #DEBUG print rank, ": mag_rv * mag_KE (eV) ", mag_rv**2 * (Emax-pot_energy)

   #DEBUG print rank, ": mid energy ", at.get_potential_energy(), at.get_kinetic_energy(), at.get_potential_energy()+ at.get_kinetic_energy()

   # propagate in time
   if have_quippy:
      quippy_propagate(at, dt=movement_args['MD_atom_timestep'], n_steps=movement_args['MD_atom_n_steps']) 
   else:
      exit_error("Need some non-quippy way of doing MD\n",3)

   if at.get_potential_energy()+at.get_kinetic_energy() > Emax+movement_args['MD_atom_energy_fuzz']:
      print rank, ": WARNING reject MD traj "
      at.set_positions(old_pos)
      if old_velo is not None:
	 at.set_velocities(old_velo)

   #DEBUG print rank, ": final energy ", at.get_potential_energy(), at.get_kinetic_energy(), at.get_potential_energy()+ at.get_kinetic_energy()
   #DEBUG print rank, ": final positions ", at.get_positions()[0]
   #DEBUG print rank, ": final velo ", at.get_velocities()[0]

def do_MC_atom_walk(at, movement_args, Emax):
  if movement_args['MC_atom_n_steps'] <= 0: 
      return
  #DEBUG print "do_MC_atom_walk"
  n_steps = movement_args['MC_atom_n_steps']
  step_size = movement_args['MC_atom_step_size']
  acc_rate=0
  energy = eval_energy(at)
  for i_MC_step in range(n_steps):
    #DEBUG print "i_MC_step ",i_MC_step
    at_list=list(range(at.n))
    np.random.shuffle(at_list)
    for i_at in at_list:
      #DEBUG print "i_at ",i_at
      dx = np.random.normal(0.0, step_size)
      dy = np.random.normal(0.0, step_size)
      if movement_args['2D']:
	 dz=0.0
      else:
	 dz = np.random.normal(0.0, step_size)
      old_energy = energy
      old_pos = at.get_positions()
      new_pos = old_pos.copy()
      new_pos[i_at,:] += (dx, dy,dz)
      at.set_positions(new_pos)
      energy = eval_energy(at)
      if energy > Emax:
	at.set_positions(old_pos)
	energy = old_energy
      else:
	acc_rate += 1
  return float(acc_rate)/float(n_steps*at.n)

def walk_single_walker(at, movement_args, Emax):
  #DEBUG print "walk_single_walker"
  do_MC_atom_walk(at, movement_args, Emax)
  do_MD_atom_walk(at, movement_args, Emax)
  # do_MC_cell_step(at, movement_args, Emax)

def adjust_MC_step_size(at, MC_walk_routine, movement_args, step_size_str, Emax):
  print "adjust_MC_step_size ", MC_walk_routine, step_size_str
  for i_iter in range(200):
    at_test = at.copy()
    at_test.calc_connect()
    mean_acc_rate = MC_walk_routine(at_test, movement_args, Emax)
    print "  i_iter=%d mean_acc_rate=%f %s=%f" % (i_iter, mean_acc_rate, step_size_str, movement_args[step_size_str])
    if (mean_acc_rate < 0.2):
      movement_args[step_size_str] /= 1.2
    elif (mean_acc_rate > 0.8):
      movement_args[step_size_str] *= 1.2
    else:
      break

def max_energy(walkers, n):
   # do local max
   energies_loc = np.array([ eval_energy(at) for at in walkers])
   energies = np.array(comm.allgather(energies_loc)).flatten()
   #DEBUG print rank , ": max_energies energies ",energies
   #DEBUG print rank , ": max_energies energies.argsort() ",energies.argsort()

   Emax_ind = energies.argsort()[-1:-n-2:-1]
   Emax = energies[Emax_ind]
   # WARNING: currently assumes that each node has equal number of walkers
   rank_of_max = np.floor(Emax_ind/len(walkers)).astype(int)

   return (Emax[0:-1], np.mod(Emax_ind[0:-1],len(walkers)), rank_of_max[0:-1], Emax[-1])


# do NS
def do_ns_loop():

   # Counting on conventional RNG and /dev/urandom here.  Should at least use a real parallel RNG

   if ns_args['delta_random_seed'] > 0:
      np.random.seed(rank+ns_args['delta_random_seed'])
   else:
      np.random.seed()
   if rank == 0: # share a common random state
      common_random_state = np.random.get_state()
      common_random_state = comm.bcast(common_random_state, root=0)
      # now back to local unique seed for rank=0
      if ns_args['delta_random_seed'] > 0:
	 np.random.seed(size+ns_args['delta_random_seed'])
      else:
	 np.random.seed()
   else:
      # share a common random state
      common_random_state = None
      common_random_state = comm.bcast(common_random_state, root=0)

   ## print rank, ": random state ", np.random.get_state()
   ## if rank == 0:
      ## print rank, ": common random state ", common_random_state


   max_n_cull_per_task = int(n_cull/size)
   if max_n_cull_per_task * size != n_cull:
      max_n_cull_per_task += 1
   #DEBUG print rank, ": max_n_cull_per_task ", max_n_cull_per_task

   # figure out n_steps to walk on each iteration to get correct expected number
   def set_n_steps(prop):
      if movement_args[prop+'_expected'] > 0:
	 if movement_args[prop] > 0:
	    exit_error("Got both MC_atom_n_steps and MC_atom_n_steps_expected, conflict\n", 5)
	 survival_rate = 1.0-float(n_cull)/float(ns_args['n_walkers'])
	 mean_lifetime = survival_rate/(1.0-survival_rate)**2
	 chance_of_walking_per_iter = float(max_n_cull_per_task*size)/float(ns_args['n_walkers'])
	 if rank == 0:
	    print "Calculating number of steps : survival_rate ", survival_rate, " mean_lifetime ", mean_lifetime, "chance_of_walking_per_iter ", chance_of_walking_per_iter
	 # chance_of_walking_per_iter * n_steps_per_iter * mean_lifetime = n_steps_expected
	 # n_steps_per_iter = ceil ( float(n_steps_expected)/(float(chance_of_walking_per_iter*mean_lifetime)) )
	 movement_args[prop] = math.ceil ( float(movement_args[prop+'_expected'])/(float(chance_of_walking_per_iter*mean_lifetime)) )
      else:
	 if movement_args[prop] > 0 and rank == 0:
	    print "WARNING: using absolute number of "+prop

   set_n_steps('MC_atom_n_steps')
   set_n_steps('MD_atom_n_steps')

   if  rank == 0:
      print "Using calculated number of MC_atom_n_steps ", movement_args['MC_atom_n_steps']
      print "Using calculated number of MD_atom_n_steps ", movement_args['MD_atom_n_steps']

   (Emax, cull_ind, cull_rank, Emax_next) = max_energy(walkers, 1)
   for at in walkers:
      walk_single_walker(at, movement_args, Emax+10.0)

   for i_ns_step in range(ns_args['n_iter']):
      #DEBUG if rank == 0:
	 #DEBUG print "starting ns loop ",i_ns_step

      if ns_args['debug'] >= 2:
	 print rank, ": LOOP_TE START 00 ",i_ns_step, [ eval_energy(at) for at in walkers ]
      if ns_args['debug'] >= 2:
	 print rank, ": LOOP_PE START 01 ",i_ns_step, [ eval_energy(at, True) for at in walkers ]


      # do NS config dropping/forming
      (Emax, cull_ind, cull_rank, Emax_next) = max_energy(walkers, n_cull)

      cull_list=[None] * size
      for r in range(size):
	 entries_for_this_rank = np.where(cull_rank == r)[0]
	 cull_list[r] = cull_ind[entries_for_this_rank]

      #DEBUG print rank, ": got Emax ", Emax
      #DEBUG print rank, ": orig cull list ", cull_list

      Emax_of_step=Emax_next
      if rank == 0:
        print i_ns_step, "Emax_of_step ", Emax_of_step

      # record Emax walkers energies and configurations
      if rank == 0:
	for E in Emax:
	   energy_io.write("%d %f\n" % (i_ns_step, E))
      if cull_list[rank] is not None:
	 for i in cull_list[rank]:
	    #DEBUG print rank, ": writing walker ",i
	    if have_quippy:
	       walkers[i].write(traj_io)
	    else:
	       exit_error("Need some non-quippy way of writing trajectory\n",3)

      # calculate how many will be culled on each rank
      n_cull_of_rank = np.array([ sum(cull_rank == r) for r in range(size) ])
      #DEBUG print rank, ": n_cull_of_rank ", n_cull_of_rank

      # label configs to be culled
      status = np.empty( (size, n_walkers), np.object_)
      status[:,:] = ''
      for r in range(size):
	 status[r,cull_ind[np.where(cull_rank == r)[0]]] = 'c_t'

      if ns_args['debug'] >= 1:
	 initial_PE_loc = [ eval_energy(at, True) for at in walkers ]
	 initial_PE = np.array(comm.allgather(initial_PE_loc)).flatten()
	 initial_changed = initial_PE[np.where(status.flatten() == 'c_t')]
	 initial_unchanged = initial_PE[np.where(status.flatten() == '')]

      #DEBUG for r in range(len(status)):
	 #DEBUG print rank, ": initial status ", r, status[r]

      # find load balance by cloning on top of excess maxima
      recv_ind=[]
      recv_rank=[]
      send_ind=[]
      send_rank=[]
      cull_inds_to_remove=[]

      for r in range(size):
	 #DEBUG print rank, ": load balance for rank ", r
	 for dr in np.array(zip(np.array(range(1,size)), -np.array(range(1,size)))).flatten():
	    if n_cull_of_rank[r] <= max_n_cull_per_task: # not too many to be culled on this rank
	       break
	    # this rank has too many to cull, must receive replacement from another node
	    remote_r = (r+dr) % size
	    #DEBUG print rank, ": check tranfer to ", remote_r
	    if n_cull_of_rank[remote_r] < max_n_cull_per_task: # send from r+dr to r
	       n_transfer = min(n_cull_of_rank[r]-max_n_cull_per_task, max_n_cull_per_task-n_cull_of_rank[remote_r])
	       #DEBUG print rank, ": got n_tranfer ", n_transfer
	       recv_rank.extend([r]*n_transfer)
	       send_rank.extend([remote_r]*n_transfer)
	       local_ind = np.where(status[r,:] == 'c_t')[0][0:n_transfer]
	       recv_ind.extend(local_ind)
	       remote_ind = np.where(status[remote_r,:] == '')[0][0:n_transfer]
	       send_ind.extend(remote_ind)
	       status[r,local_ind] = 'c_s'
	       status[remote_r,remote_ind] = 'c_t_a'
	       n_cull_of_rank[r] -= n_transfer
	       n_cull_of_rank[remote_r] += n_transfer

	 # dr_mag = 1
	 # #DEBUG print rank, ": initial n_cull_of_rank ", n_cull_of_rank
	 # while n_cull_of_rank[r] > max_n_cull_per_task: # this rank has too many to cull, must receive replacement from another node
	    # for dr in (-dr_mag, dr_mag):
	       # remote_r = (r+dr) % size
	       # #DEBUG print rank, ": check tranfer to ", remote_r
	       # if n_cull_of_rank[remote_r] < max_n_cull_per_task: # send from r+dr to r
		  # n_transfer = min(n_cull_of_rank[r]-max_n_cull_per_task, max_n_cull_per_task-n_cull_of_rank[remote_r])
		  # #DEBUG print rank, ": got n_tranfer ", n_transfer
		  # recv_rank.extend([r]*n_transfer)
		  # send_rank.extend([remote_r]*n_transfer)
		  # local_ind = np.where(status[r,:] == 'c_t')[0][0:n_transfer]
		  # recv_ind.extend(local_ind)
		  # remote_ind = np.where(status[remote_r,:] == '')[0][0:n_transfer]
		  # send_ind.extend(remote_ind)
		  # status[r,local_ind] = 'c_s'
		  # status[remote_r,remote_ind] = 'c_t_a'
		  # n_cull_of_rank[r] -= n_transfer
		  # n_cull_of_rank[remote_r] += n_transfer
	       # if n_cull_of_rank[r] <= max_n_cull_per_task:
		  # break
	    # dr_mag += 1
	    # #DEBUG print rank, ": new n_cull_of_rank ", n_cull_of_rank

      #DEBUG for r in range(len(status)):
	 #DEBUG print rank, ": post-cull-load-balance status ", r, status[r]

      # save local random state, and switch to common one
      local_random_state = np.random.get_state()
      np.random.set_state(common_random_state)

      # select clones
      for r in range(size):
	 #DEBUG print rank, ": finding clones for rank ",r
	 list_clone_target = np.where(status[r,:] == 'c_t')[0]
	 #DEBUG print rank, ": list_clone_target ", list_clone_target
	 n_clone_target = len(list_clone_target)
	 n_avail = sum(status[r,:] == '')
	 # do local clones
	 n_local_clones = min(n_avail, n_clone_target)
	 for i in range(n_local_clones):
	    r_i = np.random.randint(0, n_walkers)
	    while status[r,r_i] != '':
	       r_i = np.random.randint(0, n_walkers)
	    # now r_i should be something with status ''
	    # clone from r_i into list_clone_target[i]
	    #DEBUG print rank, ": local clone from ", r_i," to  ",list_clone_target[i]
	    if r == rank: # actually do copy for this rank only
	       #DEBUG print rank, ": local clone do copy"
	       walkers[list_clone_target[i]].set_positions(walkers[r_i].get_positions())
	       walkers[list_clone_target[i]].set_cell(walkers[r_i].get_cell())
	    status[r,r_i] = 'c_s'
	    status[r,list_clone_target[i]] = 'c_t_a'
	 # do remote clones
	 n_remaining_clones = n_clone_target - n_local_clones
	 for dr in np.array(zip(np.array(range(1,size)), -np.array(range(1,size)))).flatten():
	    if n_remaining_clones <= 0:
	       break
	    remote_r = (r+dr) % size
	    n_avail_remote = sum(status[remote_r,:] == '')
	    #DEBUG print rank, ": check transfer to rank ", remote_r, " remote status ", status[remote_r,:], " n_avail_remote ",n_avail_remote
	    if n_avail_remote > 0: # something is available on remote_r
	       # send from random avail walker on remote_r to clone_target on r
	       n_transfer = min(n_remaining_clones, n_avail_remote)

	       #DEBUG print rank, ": n_transfer ", n_transfer

	       # set ranks
	       send_rank.extend([remote_r]*n_transfer)
	       recv_rank.extend([r]*n_transfer)

	       # set indices
	       r_is = []
	       for ii in range(n_transfer):
		  r_i = np.random.randint(0, n_walkers)
		  while status[remote_r,r_i] != '':
		     r_i = np.random.randint(0, n_walkers)
		  # now r_i should be something with status ''
		  #DEBUG print rank, ": cloning from ", remote_r, r_i, " status ",status[remote_r, r_i]
		  status[remote_r,r_i] = 'c_s'
		  r_is.append(r_i)
	       send_ind.extend(r_is)

	       list_clone_target = np.where(status[r,:] == 'c_t')[0]
	       status[r,list_clone_target[0:n_transfer]] = 'c_t_a'
	       recv_ind.extend(list_clone_target[0:n_transfer])

	       n_remaining_clones -= n_transfer
	       #DEBUG print rank, ": n_remaining_clones ", n_remaining_clones

      if ns_args['debug'] >= 2:
	 print rank, ": LOOP_PE POST_LOC_CLONE 15 ",i_ns_step, [ eval_energy(at, True) for at in walkers ]

      # make into numpy arrays so that mathematical operations will work
      send_rank = np.array(send_rank)
      send_ind = np.array(send_ind)
      recv_rank = np.array(recv_rank)
      recv_ind = np.array(recv_ind)

      # save new common state, and restore to local state
      common_random_state = np.random.get_state()
      np.random.set_state(local_random_state)

      #DEBUG for r in range(len(status)):
	 #DEBUG print rank, ": post-cloning status ", r, status[r]


      # create sending/receiving buffers
      #DEBUG print rank, ": recv_rank ", recv_rank
      #DEBUG print rank, ": recv_ind ", recv_ind
      #DEBUG print rank, ": send_rank ", send_rank
      #DEBUG print rank, ": send_ind ", send_ind
      # create sending/receiving buffers
      pos_send_buf=[None] * size
      cell_send_buf=[None] * size
      for i in np.where(send_rank == rank)[0]:
	 r_recv = recv_rank[i]
	 i_send = send_ind[i]
	 #DEBUG print rank, ": sending to ",r_recv," from index ",i_send
	 if pos_send_buf[r_recv] is None:
	    pos_send_buf[r_recv] = []
	 if cell_send_buf[r_recv] is None:
	    cell_send_buf[r_recv] = []
	 pos_send_buf[r_recv].append(walkers[i_send].get_positions())
	 cell_send_buf[r_recv].append(walkers[i_send].get_cell())

      #DEBUG print rank, ": pos_send_buf ", pos_send_buf
      #DEBUG print rank, ": cell_send_buf ", cell_send_buf

      # do communication
      pos_recv_buf = comm.alltoall(pos_send_buf)
      cell_recv_buf = comm.alltoall(cell_send_buf)

      # copy from receive buffers into walkers structure
      my_recv_ind = np.array(recv_ind)[np.where(np.array(recv_rank) == rank)[0]]
      #DEBUG print rank, ": my_recv_ind ", my_recv_ind
      recv_i = 0
      for (pos_array, cell_array) in zip(pos_recv_buf, cell_recv_buf):
	 #DEBUG print rank, ": received pos_array from rank", pos_array 
	 #DEBUG print rank, ": received cell_array from rank", cell_array 
	 if pos_array is not None:
	    for (pos_entry, cell_entry) in zip(pos_array, cell_array):
	       #DEBUG print rank, ": pos_entry ",pos_entry
	       #DEBUG print rank, ": cell_entry ",cell_entry
	       #DEBUG print rank, ": copying received config to index ",my_recv_ind[recv_i]
	       walkers[my_recv_ind[recv_i]].set_positions(pos_entry)
	       walkers[my_recv_ind[recv_i]].set_cell(cell_entry)
	       recv_i += 1

      if ns_args['debug'] >= 2:
	 print rank, ": LOOP_PE POST_CLONE 20 ",i_ns_step, [ eval_energy(at, True) for at in walkers ]

      # move cloned walkers
      #DEBUG for at in walkers:
	#DEBUG print rank, ": pre-move walkers", at.get_positions()[0]
      #DEBUG print rank, ": pre-move energies", [ eval_energy(at) for at in walkers ]

      ### # do atom MC step size adj
      ### if movement_args['MC_atom_n_steps'] > 0 and i_ns_step%10 == 0:
	 ### adjust_MC_step_size(walkers[0], do_MC_atom_walk, movement_args, 'MC_atom_step_size', Emax_of_step)

      # walk clone targets
      clone_walk_ind = np.where(status[rank,:] == 'c_t_a')[0]
      for i_at in clone_walk_ind:
	#DEBUG print rank, ": walk clone ", i_at
	walk_single_walker(walkers[i_at], movement_args, Emax_of_step)

      # check that everything that should have been changed has, and things that shouldn't have, haven't
      if ns_args['debug'] >= 1:
	 final_PE_loc = [ eval_energy(at, True) for at in walkers ]
	 final_PE = np.array(comm.allgather(final_PE_loc)).flatten()
	 if rank == 0:
	    final_status = status.flatten()
	    for e in initial_unchanged:
	       if e not in final_PE:
		  print "initial_PE ", initial_PE
		  print "final_PE ", final_PE
		  print "final_status ", final_status
		  print "WARNING energy that should have been unchanged ", e," missing from final energies"
	    for e in initial_changed:
	       if e in final_PE:
		  print "initial_PE ", initial_PE
		  print "final_PE ", final_PE
		  print "final_status ", final_status
		  print "WARNING: energy that should have been changed ", e," still there in final energies"

      #DEBUG print rank, ": before extra walks # ", max_n_cull_per_task - len(clone_walk_ind)
      #DEBUG print rank, ": before extra walks status ", status[rank, r_i]

      # walk extras
      for ii in range(max_n_cull_per_task - len(clone_walk_ind)):
	 r_i = np.random.randint(0, n_walkers)
	 while status[rank,r_i] != '' and status[rank,r_i] != 'c_s':
	    r_i = np.random.randint(0, n_walkers)
	 #DEBUG print rank, ": walk extra ", r_i
	 walk_single_walker(walkers[r_i], movement_args, Emax_of_step)
	 # this status will be set only on this MPI task
	 status[rank,r_i] = 'e_w'

      if ns_args['debug'] >= 2:
	 print rank, ": LOOP_TE END 30 ",i_ns_step, [ eval_energy(at) for at in walkers ]

      #DEBUG for r in range(len(status)):
	 #DEBUG print rank, ": final status ", r, status[r]

      #DEBUG for at in walkers:
	#DEBUG print rank, ": post-move walkers", at.get_positions()[0]
      #DEBUG print rank, ": post-move energies", [ eval_energy(at) for at in walkers ]

traj_io = quippy.CInOutput("traj.%d.xyz" % rank, action=quippy.OUTPUT)
if rank == 0:
   energy_io = open("energies", "w")

if ns_args['profile'] == rank:
   import cProfile
   cProfile.run('do_ns_loop')
else:
   do_ns_loop()

if rank == 0:
   energy_io.close()
traj_io.close()
MPI.Finalize()
sys.exit(0)
