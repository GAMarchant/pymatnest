CURRENT SCHEME

calculate n_steps from n_steps_expected (used only for blocked)

blocked:
	repeat n_steps
	     block: do in random order:
		do_(MC|MD)_atom_walk (vel_rando+atom_n_substeps MD or atom_n_substeps MC sweeps)
		do_MC_cell_walk (cell_n_substeps x (in random order: shear + stretch + vol steps))
		do_MC_swap_walk (swap_n_substeps attempts)
unblocked
	do in random order
	     n_steps_unblocked_atom x do_(MC|MD)_atom_walk (vel_rando+atom_n_substeps MD or atom_n_substeps MC sweeps)
	     n_steps_unblocked_cell_shear x cell_shear_step
	     n_steps_unblocked_cell_stretch x cell_stretch_step
	     n_steps_unblocked_cell_volume x cell_volume_step
	     n_steps_unblocked_swap x do_MC_swap_walk


NEW SCHEME

specify
	n_model_calls_expected
	n_atom_steps
		atom_traj_len
	n_cell_volume_steps
	n_cell_shear_steps
	n_cell_stretch_steps
	n_swap_steps
	blocked=T/F

calculate n_model_calls from n_model_calls_expected

blocked:
	create_list:
	       1 x do_(MC|MD)_atom_walk (n_atom_steps x [vel + atom_traj_len x MD steps or atom_traj_len x MC sweeps])
	       n_cell_volume_steps x do_cell_volume
	       n_cell_shear_steps x do_cell_shear
	       n_cell_stretch_steps x do_cell_stretch
	       n_swap_steps x do_MC_swap_step
	while n_model_calls_used <  n_model_calls
		shuffle list
		do list in (random) order

unblocked:
	create_list:
		while n_model_calls_used <  n_model_calls
			add n_atom_steps * do_(MC|MD)_atom_walk (vel + atom_traj_len x MD steps or atom_traj_len x MC sweep)
			add n_cell_volume_steps * do_cell_volume_step
			add n_cell_shear_steps * do_cell_shear_step
			add n_cell_stretch_steps * do_cell_stretch_step
			add n_swap_steps * do_MC_swap_step
	shuffle list
	do list in (random) order [ possible to quit if n_model_calls_used >= n_model_calls - will improve granularity of parallelisation, but could worsen load balance]
