diff --git a/ase/io/lammpsdata.py b/ase/io/lammpsdata.py
index 4b81789..86c0c5a 100644
--- a/ase/io/lammpsdata.py
+++ b/ase/io/lammpsdata.py
@@ -36,10 +36,12 @@ def read_lammps_data(fileobj, Z_of_type=None, style='full'):
     pos_in = {}
     travel_in = {}
     mol_id_in = {}
+    mmcharge_in = {}
     mass_in = {}
     vel_in = {}
     bonds_in = []
     angles_in = []
+    dihedrals_in = []
 
     sections = ["Atoms",
                 "Velocities",
@@ -148,6 +150,7 @@ def read_lammps_data(fileobj, Z_of_type=None, style='full'):
                     pos_in[id] = (int(fields[2]), float(fields[4]),
                                   float(fields[5]), float(fields[6]))
                     mol_id_in[id] = int(fields[1])
+                    mmcharge_in[id] = float(fields[3])
                     if len(fields) == 10:
                         travel_in[id] = (int(fields[7]),
                                          int(fields[8]),
@@ -180,6 +183,12 @@ def read_lammps_data(fileobj, Z_of_type=None, style='full'):
                                   int(fields[2]),
                                   int(fields[3]),
                                   int(fields[4])))
+            elif section == "Dihedrals": # id type atom1 atom2 atom3 atom4
+                dihedrals_in.append((int(fields[1]),
+                                     int(fields[2]),
+                                     int(fields[3]),
+                                     int(fields[4]),
+                                     int(fields[5])))
 
     # set cell
     cell = np.zeros((3, 3))
@@ -210,6 +219,10 @@ def read_lammps_data(fileobj, Z_of_type=None, style='full'):
         mol_id = np.zeros((N), int)
     else:
         mol_id = None
+    if len(mmcharge_in) > 0:
+        mmcharge = np.zeros((N), float)
+    else:
+        mmcharge = None
     if len(travel_in) > 0:
         travel = np.zeros((N, 3), int)
     else:
@@ -222,6 +235,10 @@ def read_lammps_data(fileobj, Z_of_type=None, style='full'):
         angles = [""] * N
     else:
         angles = None
+    if len(dihedrals_in) > 0:
+        dihedrals = [""] * N
+    else:
+        dihedrals = None
 
     ind_of_id = {}
     # copy per-atom quantities from read-in values
@@ -236,6 +253,8 @@ def read_lammps_data(fileobj, Z_of_type=None, style='full'):
             travel[i] = travel_in[id]
         if mol_id is not None:
             mol_id[i] = mol_id_in[id]
+        if mmcharge is not None:
+            mmcharge[i] = mmcharge_in[id]
         ids[i] = id
         # by type
         types[i] = type
@@ -261,6 +280,8 @@ def read_lammps_data(fileobj, Z_of_type=None, style='full'):
         at.arrays['travel'] = travel
     if mol_id is not None:
         at.arrays['mol-id'] = mol_id
+    if mmcharge is not None:
+        at.arrays['mmcharge'] = mmcharge
 
     if bonds is not None:
         for (type, a1, a2) in bonds_in:
@@ -287,6 +308,20 @@ def read_lammps_data(fileobj, Z_of_type=None, style='full'):
                 angles[i] = '_'
         at.arrays['angles'] = np.array(angles)
 
+    if dihedrals is not None:
+        for (type, a1, a2, a3, a4) in dihedrals_in:
+            i_a1 = ind_of_id[a1]
+            i_a2 = ind_of_id[a2]
+            i_a3 = ind_of_id[a3]
+            i_a4 = ind_of_id[a4]
+            if len(dihedrals[i_a1]) > 0:
+                dihedrals[i_a1] += ","
+            dihedrals[i_a1] += "%d-%d-%d(%d)" % (i_a2, i_a3, i_a4, type)
+        for i in range(len(dihedrals)):
+            if len(dihedrals[i]) == 0:
+                dihedrals[i] = '_'
+        at.arrays['dihedrals'] = np.array(dihedrals)
+
     at.info['comment'] = comment
 
     return at
