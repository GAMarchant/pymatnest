#!/usr/bin/env python

import sys

print_prefix=""

def usage():
  sys.stderr.write("Usage: %s [ -no_mpi ] < input\n" % sys.argv[0])
  sys.stderr.write("input:\n")
  sys.stderr.write("start_file=path_to_file.xyz (mutually exclusive with restart_file, one is required)\n")
  sys.stderr.write("restart_file=path_to_file.xyz (mutually exclusive with start_file, one is required)\n")
  sys.stderr.write("restart_first_iter=int (>=0, iteration being restarted from, required if restart_file is specified)\n")
  sys.stderr.write("n_walkers=int (MANDATORY)\n")
  sys.stderr.write("n_cull=int (MANDATORY)\n")
  sys.stderr.write("n_extra_walk_per_task=int (0)\n")
  sys.stderr.write("n_iter=int (MANDATORY)\n")
  sys.stderr.write("initial_energy_ceiling=float (MANDATORY)\n")
  sys.stderr.write("out_file_prefix=str (None)\n")
  sys.stderr.write("\n")
  sys.stderr.write("QUIP_pot_args=str (MANDATORY)\n")
  sys.stderr.write("QUIP_pot_params_file=str (MANDATORY)\n")
  sys.stderr.write("\n")
  sys.stderr.write("MC_atom_n_steps_expected=int (0)\n")
  sys.stderr.write("MC_atom_n_steps=int (if not specified, set from expected #)\n")
  sys.stderr.write("MC_atom_step_size=float (0.1)\n")
  sys.stderr.write("MC_atom_step_size_max=float (1.0)\n")
  sys.stderr.write("MC_atom_uniform_rv=[T | F] (F)\n")
  sys.stderr.write("\n")
  sys.stderr.write("MC_adjust_step_interval=int (10, negative for only using last iteration)\n")
  sys.stderr.write("MC_adjust_step_factor=int (1.2)\n")
  sys.stderr.write("\n")
  sys.stderr.write("MD_atom_n_steps_expected=int (0)\n")
  sys.stderr.write("MD_atom_n_steps=int (if not specified, set from expected #)\n")
  sys.stderr.write("MD_atom_n_substeps=int (10)\n")
  sys.stderr.write("MD_atom_velo_perturb=float (0.1)\n")
  sys.stderr.write("MD_atom_timestep=float (1.0)\n")
  sys.stderr.write("MD_atom_energy_fuzz=float (1.0e-8)\n")
  sys.stderr.write("\n")
  sys.stderr.write("random_energy_perturbation=float (1.0e-12)\n")
  sys.stderr.write("profile=rank_to_profile (-1)\n")
  sys.stderr.write("2D=[ T | F ] (F)\n")
  sys.stderr.write("debug=debug_level (0, <= 0 for no debugging tests/prints)\n")
  sys.stderr.write("snapshot_interval=int (1000, <=0 for no snapshots except final positions)\n")
  sys.stderr.write("delta_random_seed=seed_shift (-1, < 0 for seed from /dev/urandom)\n")
  sys.stderr.write("energy_calculator= ( quip | lammps | internal ) (quip)\n")
  sys.stderr.write("no_extra_walks_at_all=[ T | F ] (F)\n")
  sys.stderr.write("rng=( numpy | internal | rngstream ) (numpy)\n") # julia

if len(sys.argv) != 1 and len(sys.argv) != 2:
   usage()
   sys.exit(1)

use_mpi=True
if len(sys.argv) == 2:
   if sys.argv[1] == "-no_mpi":
      use_mpi=False
   else:
      usage()
      sys.exit(1)

import re, math, time, os
import numpy as np, ase
try:
   import quippy
   have_quippy=True
except:
   have_quippy=False

comm = None
rank = 0
size = 1
if use_mpi:
   try:
      from mpi4py import MPI
      comm = MPI.COMM_WORLD
      rank = comm.Get_rank()
      size = comm.Get_size()
   except:
      pass

if comm is not None and rank == 0:
   print "comm ", comm, " size ", size

def exit_error(message, stat):
   sys.stderr.write(message)
   try:
      comm.Abort(stat)
   except:
      pass
   sys.exit(stat)

# read inputs on root, then bcast
if rank == 0:
   lines=sys.stdin.readlines()
   if len(lines) == 0:
      try:
	 infile=open("ns_inputs","r")
      except:
	 exit_error("Failed to read ns_inputs file\n", 1)
      lines = infile.readlines()
   args={}
   if rank == 0:
      for line in lines:
	 if re.match("\s*(#.*)?$", line):
	    continue
	 matches = re.match("\s*(\S+)\s*=\s*(.*\S)", line)
	 if matches is None:
	    exit_error("Failed to parse line '%s'" % line, 1)
	 args[matches.group(1)] = matches.group(2)
else:
   args = None
if comm is not None:
   args = comm.bcast(args,root=0)

# parse args
ns_args={}

# convert from strings to actual args
try:
  ns_args['n_walkers'] = int(args.pop('n_walkers'))
except:
  exit_error("need number of walkers n_walkers\n",1)
try:
  ns_args['n_cull'] = int(args.pop('n_cull'))
except:
  exit_error("need number to cull n_cull\n",1)
try:
  ns_args['n_iter'] = int(args.pop('n_iter'))
except:
  exit_error("need number of NS iterations n_iter\n",1)

ns_args['start_file'] = args.pop('start_file', '')
ns_args['restart_file'] = args.pop('restart_file', '')
ns_args['restart_first_iter'] = int(args.pop('restart_first_iter', -1))
if ((ns_args['start_file'] == '' and ns_args['restart_file'] == '') or
    (ns_args['start_file'] != '' and ns_args['restart_file'] != '')):
   exit_error("Got neither or both (conflicting) start_file and restart_file\n", 3)

if ns_args['restart_file'] == '':
   try:
     ns_args['initial_energy_ceiling'] = float(args.pop('initial_energy_ceiling'))
   except:
     exit_error("need energy ceiling for initial distribution of configs initial_energy_ceiling\n",1)

ns_args['out_file_prefix'] = args.pop('out_file_prefix', '')
if ns_args['out_file_prefix'] != '':
   ns_args['out_file_prefix'] += '.'
ns_args['profile'] = int(args.pop('profile', -1))
ns_args['debug'] = int(args.pop('debug', -1))
ns_args['snapshot_interval'] = int(args.pop('snapshot_interval', 1000))
ns_args['delta_random_seed'] = int(args.pop('delta_random_seed', -1))
ns_args['n_extra_walk_per_task'] = int(args.pop('n_extra_walk_per_task', 0))
ns_args['random_energy_perturbation'] = float(args.pop('random_energy_perturbation', 1.0e-12))

ns_args['energy_calculator'] = args.pop('energy_calculator', 'quip')
do_calc_quip = False
do_calc_lammps = False
do_calc_internal = False
if ns_args['energy_calculator'] == 'quip':
   if not have_quippy:
      exit_error("Got energy_calculator=quip but not quippy module\n", 3)
   do_calc_quip=True
elif ns_args['energy_calculator'] == 'lammps':
   exit_error("energy_calculator=lammps not implemented yet\n", 3)
   do_calc_lammps=True
elif ns_args['energy_calculator'] == 'internal':
   do_calc_internal=True
else:
   exit_error("energy_calculator=%s unknown\n" % ns_args['energy_calculator'], 3)
if do_calc_quip:
   try:
     ns_args['QUIP_pot_args'] = args.pop('QUIP_pot_args')
   except:
     exit_error("need QUIP potential args QUIP_pot_args\n",1)
   try:
     ns_args['QUIP_pot_params_file'] = args.pop('QUIP_pot_params_file')
   except:
     exit_error("need QUIP potential params file QUIP_pot_params_file\n",1)

ns_args['no_extra_walks_at_all'] = args.pop('no_extra_walks_at_all', "F") in [ "t", "T", "true", "True", "TRUE", "1" ]

ns_args['rng'] = args.pop('rng', 'numpy')
import ns_rng
if ns_args['rng'] == 'numpy':
   rng = ns_rng.NsRngNumpy(ns_args['delta_random_seed'],comm)
# elif ns_args['rng'] == 'julia':
#    import julia
#    j = julia.Julia()
#    rng = ns_rng.NsRngJulia(j)
elif ns_args['rng'] == 'rngstream':
   import rngstream
   rng = ns_rng.NsRngStream(ns_args['delta_random_seed'],comm)
elif ns_args['rng'] == 'internal':
   rng = ns_rng.NsRngInternal(ns_args['delta_random_seed'],comm)
else:
   exit_error("rng=%s unknown\n" % ns_args['rng'], 3)

movement_args={}

movement_args['MC_atom_n_steps_expected'] = int(args.pop('MC_atom_n_steps_expected', 0))
movement_args['MC_atom_n_steps'] = int(args.pop('MC_atom_n_steps', 0))
movement_args['MC_atom_step_size'] = float(args.pop('MC_atom_step_size', 0.1))
movement_args['MC_atom_step_size_max'] = float(args.pop('MC_atom_step_size_max', 1.0))
movement_args['MC_atom_uniform_rv'] = args.pop('MC_atom_uniform_rv', "F") in [ "t", "T", "true", "True", "TRUE", "1" ]

movement_args['MD_atom_n_steps_expected'] = int(args.pop('MD_atom_n_steps_expected', 0))
movement_args['MD_atom_n_steps'] = int(args.pop('MD_atom_n_steps', 0))
movement_args['MD_atom_n_substeps'] = int(args.pop('MD_atom_n_substeps', 10))
movement_args['MD_atom_velo_perturb'] = float(args.pop('MD_atom_velo_perturb', 0.1))
movement_args['MD_atom_timestep'] = float(args.pop('MD_atom_timestep', 1.0))
movement_args['MD_atom_energy_fuzz'] = float(args.pop('MD_atom_energy_fuzz', 1.0e-8))

movement_args['MC_adjust_step_interval'] = int(args.pop('MC_adjust_step_interval', 10))
movement_args['MC_adjust_step_factor'] = float(args.pop('MC_adjust_step_factor', 1.2))

movement_args['2D'] = args.pop('2D', "F") in [ "t", "T", "true", "True", "TRUE", "1" ]

confining_pot_args={}
confining_pot_args['mag'] = float(args.pop('confining_potential_mag', 0.0))

if 'QUIP_pot_params_file' in ns_args:
   if not have_quippy:
      exit_error("Got QUIP_pot_params but no quippy module\n", 3)
   try:
      if rank == 0:
	 ns_args['QUIP_pot_params'] = open(ns_args['QUIP_pot_params_file'],"r").read()
      else:
	 ns_args['QUIP_pot_params'] = None
      if comm is not None:
	 ns_args['QUIP_pot_params'] = comm.bcast(ns_args['QUIP_pot_params'], root=0)
   except:
      exit_error("Failed to read params file '%s'\n" % ns_args['QUIP_pot_params_file'], 1)
else:
   if ns_args['energy_calculator'] != 'internal':
      sys.stderr.write("Got no *_pot_params_file")

if len(args) > 0:
  exit_error(str(args)+"\nUnknown arguments read in\n", 2)

if rank == 0:
   print "ns_args ",ns_args
   print "movement_args ",movement_args

# initialise potential
if do_calc_quip:
   pot = quippy.Potential(ns_args['QUIP_pot_args'], param_str=ns_args['QUIP_pot_params'], calculation_always_required=True, cutoff_skin=1.0)
elif do_calc_internal:
   pass
elif do_calc_lammps:
   exit_error("no lammps initialization of potential implemented yet\n", 3)
else:
   exit_error("Need some way of initializing calculator\n",3)

# figure out numbers of local walkers
rank_of_walker = [0]*ns_args['n_walkers']
if size <= 1:
   n_walkers = ns_args['n_walkers']
else:
   n_walkers_per_task = ns_args['n_walkers']/size
   if n_walkers_per_task*size != ns_args['n_walkers']:
      exit_error("number of walkers %d not divisible by number of MPI processes %d\n" % (ns_args['n_walkers'], size), 5)
   last_walker = 0
   for i_rank in range(size):
      first_walker = last_walker
      last_walker = last_walker + n_walkers_per_task
      if last_walker > ns_args['n_walkers']:
	 last_walker = ns_args['n_walkers']
      if i_rank == rank:
	 n_walkers = last_walker-first_walker
	 my_first_walker = first_walker
	 my_last_walker = last_walker
      if last_walker > first_walker:
	 rank_of_walker[first_walker:last_walker] = [i_rank]*(last_walker-first_walker)

# figure out number of configs that will be culled on each task
n_cull = ns_args['n_cull']
n_extra_walk_per_task = ns_args['n_extra_walk_per_task']
max_n_cull_per_task = int(n_cull/size)
if max_n_cull_per_task * size != n_cull:
   max_n_cull_per_task += 1

# internal model, LJ eps=1, sigma=1, cutoff=3,  with PBC cube l = pbc[0,0]
internal_cutoff = 3.0
Eshift = internal_cutoff**-12 - internal_cutoff**-6
def internal_Vlj(dr_vec, Eshift=0.0):
   return (np.sum(dr_vec**-12 - dr_vec**-6) - Eshift*len(dr_vec))

# pos is Nx3, l is a scalar box size
def energy_internal_pos(pos, l):
   n_at=np.size(pos,0)
   dr_list = np.zeros( (n_at*(n_at-1)/2,3) )
   offset=0
   # calc relative pos vector
   for i in range(n_at):
      dr_list[offset:offset+(n_at-i-1),0] = pos[i,0] - pos[i+1:,0]
      dr_list[offset:offset+(n_at-i-1),1] = pos[i,1] - pos[i+1:,1]
      dr_list[offset:offset+(n_at-i-1),2] = pos[i,2] - pos[i+1:,2]
      offset += n_at-i-1
   # apply min image
   dr_list[:,:] -= l*np.floor(dr_list[:,:]/l+0.5)
   # magnitude of vectors
   dr_list_mag = np.sqrt(np.sum(dr_list*dr_list,axis=1))

   return np.sum(internal_Vlj(dr_list_mag[np.where(dr_list_mag < internal_cutoff)],Eshift))

def energy_internal(at):
   return energy_internal_pos(at.get_positions(), at.get_cell()[0,0])

def eval_energy(at, PE_only=False):
  # potential
  if do_calc_quip or do_calc_lammps:
      energy = at.get_potential_energy()
  elif do_calc_internal:
      energy = energy_internal(at)
  else:
      sys.stderr.write("No way to eval_energy()\n", 5)

  # confining
  if confining_pot_args['mag'] > 0.0:
      energy += confining_pot_args['mag']*(np.linalg.norm(at.pos)**2)

  # kinetic
  if not PE_only and at.has('momenta') and at.has('masses'):
     energy += at.get_kinetic_energy()

  return energy

def quippy_propagate(at, dt, n_steps):
   old_velo = at.get_velocities()
   if old_velo is not None:
      if not hasattr(at, 'velo'):
	 at.add_property('velo', 0.0, n_cols=3)
      at.velo[:,:] = old_velo.transpose()/(ase.units.Ang/ase.units.fs)
   ds=quippy.DynamicalSystem(at)

   #DEBUG print "initial config, using dt ", dt/ase.units.fs
   #DEBUG ds.atoms.write("stdout")

   if ns_args['debug'] >= 10:
      ds.run(pot, dt=dt/ase.units.fs, n_steps=n_steps, summary_interval=1, connect_interval=1, write_interval=0, save_interval=0)
   else:
      ds.run(pot, dt=dt/ase.units.fs, n_steps=n_steps, summary_interval=0, connect_interval=1, write_interval=0, save_interval=0)

   at.set_velocities(at.velo.transpose()*(ase.units.Ang/ase.units.fs))


def velo_rv_mag(at, Emax):
   if movement_args['2D']:
      unit_rv[:,2] = 0.0
      nDOF = 2.0
   else:
      nDOF = 3.0
   # In 3D rv_mag should have prob distrib p(r) = r^(3N-1). 
   # Using transformation rule p(y) = p(x) |dx/dy|, with p(y) = y^{3N-1} and p(x) = 1,
   #       one gets dx/dy = y^{3N-1}
   #                x = y^{3N}
   #                y = x^{1/3N}
   return rng.float_uniform(0.0,1.0)**(1.0/(nDOF*len(at)))

def velo_unit_rv(at):
   unit_rv = rng.normal( 1.0, (len(at), 3) )
   unit_rv /= np.linalg.norm(unit_rv)
   return unit_rv

def gen_random_velo(at, Emax, unit_rv=None):
   if unit_rv is None:
      unit_rv = velo_unit_rv(at)
   rv_mag = velo_rv_mag(at, Emax)

   # from Baldock thesis Eq. 11.10 
   #     p^{**} = r \mathbf{S} \hat{\mathbf{r}}
   # and 11.11 
   #     S_{ij} = \delta_{ij} (2 m_i [ E_{lim} - U(q))])^{1/2}
   # p_i = r (2 m_i)^{1/2} (E-U)^{1/2} \hat{r}_i
   # v_i = p_i / m_i = r (2/m)^{1/2} (E-U)^{1/2} \hat{r}_i

   pot_energy = at.get_potential_energy()
   if Emax > pot_energy:
      masses = at.get_masses()
      velocities = rv_mag * np.sqrt(2.0/np.array([masses,]*3).transpose()) * np.sqrt((Emax-pot_energy)) * unit_rv
   else: # should never happen - maybe it's happening because of MD_atom_energy_fuzz
      if rank == 0:
	 print print_prefix, ": WARNING: got pot_energy ",pot_energy, " > Emax ",Emax, " in do_MD_atom_walk"
      velocities = 0.0 * unit_rv

   return velocities

from itertools import izip
def pairwise(iterable):
   a = iter(iterable)
   return izip(a, a)

def perturb_velo(at, Emax):
   if movement_args['MD_atom_velo_perturb'] == 0.0:
      return
   elif movement_args['MD_atom_velo_perturb'] < 0.0:
      # randomize completely
      at.set_velocities(gen_random_velo(at, Emax))
   else: # perturb
      velo = at.get_velocities()
      velo_mag = np.linalg.norm(velo)
      if velo_mag == 0.0:
	 at.set_velocities(gen_random_velo(at, Emax))
	 return
      # pick new random magnitude - count on dimensionality to make change small
      velo = gen_random_velo(at, Emax, velo/velo_mag)

      # apply random rotations
      indices = range(len(at))
      rng.shuffle_in_place(indices)
      for (ind_1_i, ind_2_i) in pairwise(indices):
	 ind_1_j = rng.int_uniform(0,3)
	 ind_2_j = rng.int_uniform(0,3)
	 ang = rng.float_uniform(-movement_args['MD_atom_velo_perturb']*3.14159,movement_args['MD_atom_velo_perturb']*3.14159)
	 c_ang = np.cos(ang)
	 s_ang = np.sin(ang)
	 v_1 = velo[ind_1_i,ind_1_j] * c_ang + velo[ind_2_i,ind_2_j] * s_ang
	 v_2 = -velo[ind_1_i,ind_1_j] * s_ang + velo[ind_2_i,ind_2_j] * c_ang
	 velo[ind_1_i,ind_1_j] = v_1
	 velo[ind_2_i,ind_2_j] = v_2
      at.set_velocities(velo)

def do_MD_atom_walk(at, movement_args, Emax):

   if confining_pot_args['mag'] > 0.0:
      exit_error("Can't do_MD_atom_walk with confining potential > 0.0\n", 4)

   if movement_args['MD_atom_n_steps'] <= 0:
      return

   #DEBUG global print_prefix
   #DEBUG print print_prefix, ": do_MD_atom_walk with Emax ", Emax # DEBUG

   #DEBUG print print_prefix, ": initial positions ", at.get_positions()[0]
   #DEBUG if at.get_velocities() is not None:
      #DEBUG print print_prefix, ": initial velo ", at.get_velocities()[0]
   #DEBUG else:
      #DEBUG print print_prefix, ": initial velo ", None
   #DEBUG print print_prefix, ": initial energy ", at.get_potential_energy(), at.get_kinetic_energy(), at.get_potential_energy()+ at.get_kinetic_energy() # DEBUG

   #DEBUG print print_prefix, "MD_atom pre loop ",eval_energy(at), Emax

   for i_step in range(movement_args['MD_atom_n_steps']):
      old_pos = at.get_positions()
      old_cell = at.get_cell()
      old_velo = at.get_velocities()
      old_energy = at.info['ns_energy']

      #DEBUG print print_prefix, "MD_atom loop start ",eval_energy(at), Emax


      perturb_velo(at, Emax)

      #DEBUG print print_prefix, "MD_atom loop post perturb ",eval_energy(at)

      #DEBUG print print_prefix, ": masses for KE ",masses
      #DEBUG print print_prefix, ": velocities for KE ",at.get_velocities()
      #DEBUG print print_prefix, ": KE ",at.get_kinetic_energy()
      #DEBUG print print_prefix, ": mag_rv * mag_KE (eV) ", mag_rv**2 * (Emax-pot_energy)

      #DEBUG print print_prefix, ": mid energy ", at.get_potential_energy(), at.get_kinetic_energy(), at.get_potential_energy()+ at.get_kinetic_energy() # DEBUG

      # propagate in time
      if have_quippy:
	 quippy_propagate(at, dt=movement_args['MD_atom_timestep'], n_steps=movement_args['MD_atom_n_substeps']) 
      else:
	 exit_error("Need some non-quippy way of doing MD\n",3)

      #DEBUG print print_prefix, "MD_atom loop post propagate ",eval_energy(at)

      final_e = eval_energy(at)
      # perturb final energy
      at.info['ns_energy'] = final_e + rng.float_uniform(-1.0,0.0)*ns_args['random_energy_perturbation']
      # print print_prefix, ": MD trajectory energy changed ", energy, final_e, final_e - energy
      if final_e >= Emax+movement_args['MD_atom_energy_fuzz']:
	 print print_prefix, ": WARNING: reject MD traj Emax ", Emax, " total energy ", final_e
	 at.set_positions(old_pos)
	 at.set_cell(old_cell)
	 at.set_velocities(old_velo)
	 at.info['ns_energy'] = old_energy

   #DEBUG print print_prefix, ": final energy ", at.get_potential_energy(), at.get_kinetic_energy(), at.get_potential_energy()+ at.get_kinetic_energy() #DEBUG
   #DEBUG print print_prefix, ": final positions ", at.get_positions()[0]
   #DEBUG print print_prefix, ": final velo ", at.get_velocities()[0]

def do_MC_atom_walk(at, movement_args, Emax):
   if movement_args['MC_atom_n_steps'] <= 0: 
      return None
   #DEBUG print print_prefix, ": do_MC_atom_walk"
   n_steps = movement_args['MC_atom_n_steps']
   step_size = movement_args['MC_atom_step_size']
   #DEBUG print print_prefix, ": do_MC_atom_walk step_size ", step_size
   accept_num=0
   #DEBUG print print_prefix, ": MC_walk initial energy, Emax ", energy, Emax # DEBUG
   dz=0.0
   for i_MC_step in range(n_steps):
      #DEBUG print "i_MC_step ",i_MC_step
      at_list=list(range(len(at)))
      rng.shuffle_in_place(at_list)
      for i_at in at_list:
	 #DEBUG print "i_at ",i_at
	 if movement_args['MC_atom_uniform_rv']: 
	    dx = rng.float_uniform(-step_size,step_size)
	    dy = rng.float_uniform(-step_size,step_size)
	    if not movement_args['2D']:
	       dz = rng.float_uniform(-step_size,step_size)
	 else:
	    dx = rng.normal(step_size)
	    dy = rng.normal(step_size)
	    if not movement_args['2D']:
	       dz = rng.normal(step_size)
	 old_energy = at.info['ns_energy']
	 old_pos = at.get_positions()
	 new_pos = old_pos.copy()
	 new_pos[i_at,:] += (dx, dy,dz)
	 at.set_positions(new_pos)
	 energy = eval_energy(at)
	 if energy >= Emax:
	    # reject move
	    at.set_positions(old_pos)
	    energy = old_energy
	 else:
	    accept_num += 1
	 at.info['ns_energy'] = energy

   if accept_num > 0: # new energy, perturb
      at.info['ns_energy'] += rng.float_uniform(-1.0,0.0)*ns_args['random_energy_perturbation']
   #DEBUG last_energy = eval_energy(at)
   #DEBUG print print_prefix, ": MC_walk final energy, accept_rate ", energy, last_energy, float(accept_num)/float(n_steps*len(at)) #DEBUG
   return float(accept_num)/float(n_steps*len(at))

def walk_single_walker(at, movement_args, Emax):
   #DEBUG print print_prefix, ": walk_single_walker initial E", eval_energy(at) # DEBUG
   atom_accept_rate = do_MC_atom_walk(at, movement_args, Emax)
   #DEBUG print print_prefix, ": walk_single_walker mid E", eval_energy(at) # DEBUG
   do_MD_atom_walk(at, movement_args, Emax)
   ## cell_accept_rate = do_MC_cell_step(at, movement_args, Emax)
   cell_accept_rate = None
   ##
   if hasattr(at, 'n_walks') and size <= 1:
      at.n_walks += 1
   #DEBUG print print_prefix, ": walk_single_walker acc rates ", atom_accept_rate, cell_accept_rate
   #DEBUG print print_prefix, ": walk_single_walker final E", eval_energy(at) # DEBUG

   return (atom_accept_rate, cell_accept_rate)

def max_energy(walkers, n):
   # do local max
   energies_loc = np.array([ at.info['ns_energy'] for at in walkers])
   if comm is not None:
      energies = np.array(comm.allgather(energies_loc)).flatten()
   else:
      energies = energies_loc
   #DEBUG print print_prefix , ": max_energies energies ",energies
   #DEBUG print print_prefix , ": max_energies energies.argsort() ",energies.argsort()

   Emax_ind = energies.argsort()[-1:-n-1:-1]
   Emax = energies[Emax_ind]
   # WARNING: assumes that each node has equal number of walkers
   rank_of_max = np.floor(Emax_ind/len(walkers)).astype(int)

   return (Emax, np.mod(Emax_ind,len(walkers)), rank_of_max)

def adjust_MC_steps(atom_accept_rate_sum, cell_accept_rate_sum, n_entries, comm):
   atom_accept_rate=None
   if ns_args['no_extra_walks_at_all']:
      if atom_accept_rate_sum is None:
	 contrib=0
      else:
	 contrib=n_entries
      if comm is not None:
	 n_contrib = comm.allreduce(contrib, MPI.SUM)
      else:
	 n_contrib = contrib
      if n_contrib > 0:
	 if atom_accept_rate_sum is None:
	    atom_accept_rate_sum = 0.0
	 if comm is not None:
	    atom_accept_rate = comm.allreduce(atom_accept_rate_sum,MPI.SUM)/float(n_contrib)
	 else:
	    atom_accept_rate = atom_accept_rate_sum/float(n_contrib)
   else:
      if atom_accept_rate_sum is not None:
	 if comm is not None:
	    atom_accept_rate = comm.allreduce(atom_accept_rate_sum,MPI.SUM)/float(n_entries*size)
	 else:
	    atom_accept_rate = atom_accept_rate_sum/float(n_entries*size)

   cell_accept_rate=None
   if ns_args['no_extra_walks_at_all']:
      if cell_accept_rate_sum is None:
	 contrib=0
      else:
	 contrib=n_entries
      if comm is not None:
	 n_contrib = comm.allreduce(contrib, MPI.SUM)
      else:
	 n_contrib = contrib
      if n_contrib > 0:
	 if cell_accept_rate_sum is None:
	    cell_accept_rate_sum = 0.0
	 if comm is not None:
	    cell_accept_rate = comm.allreduce(cell_accept_rate_sum,MPI.SUM)/float(n_contrib)
	 else:
	    cell_accept_rate = cell_accept_rate_sum/float(n_contrib)
   else:
      if cell_accept_rate_sum is not None:
	 if comm is not None:
	    cell_accept_rate = comm.allreduce(cell_accept_rate_sum,MPI.SUM)/float(n_entries*size)
	 else:
	    cell_accept_rate = cell_accept_rate_sum/float(n_entries*size)

   if rank == 0:
      if atom_accept_rate is not None or cell_accept_rate is not None:
	 print "adjust_MC_steps mean rates atom ", atom_accept_rate, " cell ", cell_accept_rate

   if atom_accept_rate is not None:
      atom_dir=''
      if atom_accept_rate < 0.25:
	 movement_args['MC_atom_step_size'] /= movement_args['MC_adjust_step_factor']
	 atom_dir='down'
      if atom_accept_rate > 0.75:
	 movement_args['MC_atom_step_size'] *= movement_args['MC_adjust_step_factor']
	 atom_dir='up'
      ## need to do cell steps

      if movement_args['MC_atom_step_size'] > movement_args['MC_atom_step_size_max']:
	 movement_args['MC_atom_step_size'] = movement_args['MC_atom_step_size_max']
	 if rank == 0:
	    print "adjust_MC_steps maxed out MC_atom_step_size=", movement_args['MC_atom_step_size'] 

      if atom_dir != "" and rank == 0:
	 print "adjust MC_atom_step_size ",atom_dir," to ", movement_args['MC_atom_step_size']

   #### if cell_accept_rate is not None:

# figure out n_steps to walk on each iteration to get correct expected number
def set_n_steps(prop):
   if movement_args[prop+'_expected'] > 0:
      if movement_args[prop] > 0:
	 exit_error("Got both "+prop+" and "+prop+"_expected, conflict\n", 5)

      if max_n_cull_per_task*size == n_cull and n_extra_walk_per_task == 0: # no extra walkers
	 movement_args[prop] = movement_args[prop+'_expected']
	 if rank == 0:
	    print "Calculating n_walks, trivial since there are no extra walkers"
      else:
	 # f_c = n_c/n_t [ fraction of total that are culled (and walked once)]
	 # f_e = n_e/(n_t-n_c) [fraction of ones that aren't culled that are also walked ]

	 # n(1) <- f_c n_t + (1-f_c)*(1-f_e) n(1)
	 # n(l >= 2) <- (1-f_c)(1-f_e) n(l) + (1-f_c) f_e n(l-1)

	 # f = (1-f_c)f_e / (f_c+f_e-f_c f_e)

	 # n(1)/n_t = f_c/(1-(1-f_c)(1-f_e)) = f_c/(f_c+f_e-f_c f_e)
	 # n(l >= 2)/n_t = f n(l-1) = f^(l-1) n(1)/n_t
	 # n_walks = n(1)/n_t + sum_{l=2}^\infty l n(l)/n_t
	 #         = n(1)/n_t (1 + sum_{l=2}^\infty l f^{l-1})
	 #         = n(1)/n_t (1 + \sum{l=1}^\infty (l+1) f^l)
	 #         = n(1)/n_t (1 + \sum f^l + sum l f^l)
	 #         = n(1)/n_t (1 + f/(1-f) + f/(1-f)**2

	 f_cull = float(n_cull)/float(ns_args['n_walkers'])
	 f_extra = float( (max_n_cull_per_task*size-n_cull) + n_extra_walk_per_task*size ) / float(ns_args['n_walkers']-n_cull)
	 f = (1.0-f_cull)*f_extra/(f_cull+f_extra-f_cull*f_extra)

	 n_walks = f_cull/(f_cull+f_extra-f_cull*f_extra) * (1.0 + f/(1.0-f) + f/(1.0-f)**2)
	 if rank == 0:
	    print "Calculated n_walks =",n_walks, " from f_cull ",f_cull," f_extra ",f_extra
	 movement_args[prop] = int(math.ceil(movement_args[prop+'_expected']/n_walks))
	 
   else:
      if movement_args[prop] > 0 and rank == 0:
	 print "WARNING: using absolute number of "+prop


walkers=[]
if ns_args['restart_file'] == '': # start from scratch
   # read initial config
   if have_quippy:
      init_atoms = None
      if rank == 0:
	 if re.search('.xyz$', ns_args['start_file']) is not None:
	    # read config from an xyz file
	    init_atoms = quippy.Atoms(ns_args['start_file'])
	 else:
	    # create atoms structs from a list of atomic numbers and numbers of atoms
	    start_io=open(ns_args['start_file'],'r')
	    lattice=quippy.fzeros( (3,3) )
	    lattice[:,1] = [ float(s) for s in start_io.readline().split() ]
	    lattice[:,2] = [ float(s) for s in start_io.readline().split() ]
	    lattice[:,3] = [ float(s) for s in start_io.readline().split() ]
	    init_atoms=quippy.Atoms()
	    init_atoms.set_lattice(lattice)
	    for l in start_io.readlines():
	       Z = int(l.split()[0])
	       n = int(l.split()[1])
	       init_atoms.add_atoms([ [0.0]* n ] * 3, [Z]*n)
	    print "initial atoms created from a list"
	    init_atoms.write("stdout")
      if comm is not None:
	 init_atoms = comm.bcast(init_atoms, root=0)
      if do_calc_quip:
	 init_atoms.set_cutoff(pot.cutoff(), cutoff_skin=1.0)
   else:
      exit_error("need some non-quippy way of reading input configuration\n",3)

   # clone initial config into array of walkers
   if ns_args['debug'] >= 10 and have_quippy and size <= 1:
      init_atoms.params['n_walks'] = 0
   for i_walker in range(n_walkers):
     walkers.append(init_atoms.copy())
   ns_args['restart_first_iter'] = 0

   for at in walkers:
      at.set_velocities(np.zeros( (len(walkers[0]), 3) ))
      if do_calc_quip or do_calc_lammps:
	 at.set_calculator(pot)

   # initial positions are just random, up to an energy ceiling
   for at in walkers:
      at.set_scaled_positions( rng.float_uniform (0.0, 1.0, (len(at), 3) ) )
      energy = eval_energy(at)
      while math.isnan(energy) or energy > ns_args['initial_energy_ceiling']:
	 at.set_scaled_positions( rng.float_uniform(0.0, 1.0, (len(at), 3) ) )
	 energy = eval_energy(at)
      at.info['ns_energy'] = energy
else: # doing a restart
   if ns_args['restart_first_iter'] < 0:
      exit_error("Got restart_file='%s' and restart_first_iter=%d < 0" % (ns_args['restart_file'], ns_args['restart_first_iter']), 4)
   if have_quippy:
      if rank == 0: # read on head task and send to other tasks
	 l_walkers=[]
	 restart_io = quippy.CInOutput(ns_args['restart_file'], action=quippy.INPUT)
	 ar_iter = quippy.AtomsReader(restart_io).iterframes()
	 for r in range(size):
	    at_list=[]
	    for i in range(n_walkers):
	       if comm is None or r == 0:
		  walkers.append(ar_iter.next())
	       else:
		  at_list.append(ar_iter.next())
	    if r > 0:
	       comm.send(at_list, dest=r, tag=1)
	 restart_io.close()
      else: # receive from head task
	 walkers = comm.recv(source=0, tag=1)
   else:
      exit_error("need some non-quippy way of reading restart_file\n",3)

   for at in walkers:
      if do_calc_quip or do_calc_lammps:
	 at.set_calculator(pot)
      at.info['ns_energy'] = eval_energy(at)


prev_snapshot_iter = None
# do NS
def do_ns_loop():
   global print_prefix

   if rank == 0:
      nD = 3
      if movement_args['2D']:
	 nD = 2
      if ns_args['restart_file'] == '':
	 if movement_args['MD_atom_n_steps_expected'] > 0:
	    nExtraDOF = 0
	 else:
	    nExtraDOF = len(walkers[0])*nD
	 energy_io.write("%d %d %d\n" % (ns_args['n_walkers'], ns_args['n_cull'], nExtraDOF) )

   ## print print_prefix, ": random state ", np.random.get_state()
   ## if rank == 0:
      ## print print_prefix, ": common random state ", common_random_state

   if ns_args['debug'] >= 10 and size <= 1:
      n_walks_history = []

   #DEBUG print print_prefix, ": max_n_cull_per_task ", max_n_cull_per_task
   set_n_steps('MC_atom_n_steps')
   set_n_steps('MD_atom_n_steps')

   if  rank == 0:
      print "Using MC_atom_n_steps = ", movement_args['MC_atom_n_steps']
      print "Using MD_atom_n_steps = ", movement_args['MD_atom_n_steps']

   for at in walkers:
      print rank, ": initial energy ", at.info['ns_energy']

   atom_accept_rate_sum = None
   cell_accept_rate_sum = None
   accept_rate_n = 0

   prev_time = -1

   Emax_of_step = None

   verbose=False
   for i_ns_step in range(ns_args['restart_first_iter'], ns_args['n_iter']):
      print_prefix="%d %d" % (rank, i_ns_step)

      if movement_args['MC_adjust_step_interval'] < 0:
	 atom_accept_rate_sum = None
	 cell_accept_rate_sum = None
	 accept_rate_n = 0

      #DEBUG if rank == 0: # DEBUG
	 #DEBUG print "starting ns loop ",i_ns_step # DEBUG

      if ns_args['debug'] >= 20:
	 print print_prefix, ": LOOP_TE START 00 ",i_ns_step, [ eval_energy(at) for at in walkers ]
	 print print_prefix, ": LOOP_PE START 01 ",i_ns_step, [ eval_energy(at, True) for at in walkers ]


      #DEBUG (Emax, cull_ind, cull_rank, Emax_next) = max_energy(walkers, 10)
      #DEBUG if rank == 0:
	 #DEBUG print print_prefix, ": top 10 energies ", Emax
	 #DEBUG print print_prefix, ": top 10 energy indices ", cull_ind

      # get list of highest energy configs
      (Emax, cull_ind, cull_rank) = max_energy(walkers, n_cull)
      Emax_next = Emax[-1]
      if Emax_of_step is not None and rank == 0 and Emax[0] > Emax_of_step+movement_args['MD_atom_energy_fuzz']:
	 print print_prefix, ": WARNING: energy above Emax ", Emax_of_step, " bad energies: ", Emax[np.where(Emax > Emax_of_step+movement_args['MD_atom_energy_fuzz'])]

      cull_list=[None] * size
      for r in range(size):
	 entries_for_this_rank = np.where(cull_rank == r)[0]
	 cull_list[r] = cull_ind[entries_for_this_rank]

      #DEBUG print print_prefix, ": got Emax ", Emax
      #DEBUG print print_prefix, ": orig cull list ", cull_list

      if (i_ns_step > 0 and Emax_next >= Emax_of_step) and rank == 0:
	 print "WARNING: Emax not decreasing ",Emax_of_step, Emax_next
      Emax_of_step=Emax_next
      if rank == 0 and (time.time() > prev_time+60 or (i_ns_step % max(int(ns_args['n_iter']/1000),1) or i_ns_step == ns_args['n_iter']) == 0):
        print i_ns_step, "Emax_of_step ", Emax_of_step
	prev_time = time.time()

      # record Emax walkers energies and configurations
      if rank == 0:
	 for E in Emax:
	    energy_io.write("%d %.60f\n" % (i_ns_step, E))
	 energy_io.flush()
      if cull_list[rank] is not None:
	 for i in cull_list[rank]:
	    #DEBUG print print_prefix, ": writing walker ",i
	    if have_quippy:
	       walkers[i].write(traj_io)
	    else:
	       exit_error("Need some non-quippy way of writing trajectory\n",3)

      # calculate how many will be culled on each rank
      n_cull_of_rank = np.array([ sum(cull_rank == r) for r in range(size) ])

      # label configs to be culled
      status = np.empty( (size, n_walkers), np.object_)
      status[:,:] = ''
      for r in range(size):
	 status[r,cull_ind[np.where(cull_rank == r)[0]]] = 'c_t'

      if ns_args['debug'] >= 10:
	 initial_PE_loc = [ eval_energy(at, True) for at in walkers ]
	 initial_PE = np.array(comm.allgather(initial_PE_loc)).flatten()
	 initial_changed = initial_PE[np.where(status.flatten() == 'c_t')]
	 initial_unchanged = initial_PE[np.where(status.flatten() == '')]

      if ns_args['debug'] >= 30:
	 for r in range(len(status)):
	    print print_prefix, ": initial status ", r, [ s for s in status[r,:] ]

      # find load balance by cloning on top of excess maxima
      recv_ind=[]
      recv_rank=[]
      send_ind=[]
      send_rank=[]
      cull_inds_to_remove=[]

      # CHECK FOR RANDOM ISSUES
      for r in range(size):
	 #DEBUG print print_prefix, ": load balance for rank ", r
	 # maybe remote_r should be chosen completely randomly, rather than close to task of extra culled configs
	 for dr in np.array(zip(np.array(range(1,size)), -np.array(range(1,size)))).flatten():
	    if n_cull_of_rank[r] <= max_n_cull_per_task: # not too many that need to be culled on this rank
	       break
	    # this rank has too many to cull, must receive replacement from another node
	    remote_r = (r+dr) % size
	    #DEBUG print print_prefix, ": check tranfer to ", remote_r
	    if n_cull_of_rank[remote_r] < max_n_cull_per_task: # send from r+dr to r
	       n_transfer = min(n_cull_of_rank[r]-max_n_cull_per_task, max_n_cull_per_task-n_cull_of_rank[remote_r])
	       #DEBUG print print_prefix, ": got n_tranfer ", n_transfer
	       recv_rank.extend([r]*n_transfer)
	       send_rank.extend([remote_r]*n_transfer)
	       local_ind = np.where(status[r,:] == 'c_t')[0][0:n_transfer]
	       recv_ind.extend(local_ind)
	       remote_ind = np.where(status[remote_r,:] == '')[0][0:n_transfer]
	       send_ind.extend(remote_ind)
	       status[r,local_ind] = 'c_s'
	       status[remote_r,remote_ind] = 'c_t_a'
	       n_cull_of_rank[r] -= n_transfer
	       n_cull_of_rank[remote_r] += n_transfer

      #DEBUG for r in range(len(status)):
	 #DEBUG print print_prefix, ": post-cull-load-balance status ", r, status[r]

      # save local random state, and switch to common one
      rng.switch_to_common()

      # select clones
      for r in range(size):
	 #DEBUG print print_prefix, ": finding clones for rank ",r
	 list_clone_target = np.where(status[r,:] == 'c_t')[0]
	 #DEBUG print print_prefix, ": list_clone_target ", list_clone_target
	 # assign clones
	 n_remaining_clones = len(list_clone_target)
	 while n_remaining_clones > 0:
	    remote_r = rng.int_uniform(0,size)
	    n_avail_remote = sum(status[remote_r,:] == '')
	    #DEBUG print print_prefix, ": check transfer to rank ", remote_r, " remote status ", status[remote_r,:], " n_avail_remote ",n_avail_remote
	    if n_avail_remote > 0: # something is available on remote_r
	       # send from random avail walker on remote_r to clone_target on r
	       n_transfer = min(n_remaining_clones, n_avail_remote)

	       #DEBUG print print_prefix, ": n_transfer ", n_transfer

	       # set ranks
	       send_rank.extend([remote_r]*n_transfer)
	       recv_rank.extend([r]*n_transfer)

	       # set indices
	       r_is = []
	       for ii in range(n_transfer):
		  r_i = rng.int_uniform(0, n_walkers)
		  while status[remote_r,r_i] != '':
		     r_i = rng.int_uniform(0, n_walkers)
		  # now r_i should be something with status ''
		  #DEBUG print print_prefix, ": cloning from ", remote_r, r_i, " status ",status[remote_r, r_i]
		  status[remote_r,r_i] = 'c_s'
		  r_is.append(r_i)
	       send_ind.extend(r_is)

	       status[r,list_clone_target[0:n_transfer]] = 'c_t_a'
	       recv_ind.extend(list_clone_target[0:n_transfer])

	       n_remaining_clones -= n_transfer
	       #DEBUG print print_prefix, ": n_remaining_clones ", n_remaining_clones

      if ns_args['debug'] >= 20:
	 print print_prefix, ": LOOP_PE POST_LOC_CLONE 15 ",i_ns_step, [ eval_energy(at, True) for at in walkers ]

      # make into numpy arrays so that mathematical operations will work
      send_rank = np.array(send_rank)
      send_ind = np.array(send_ind)
      recv_rank = np.array(recv_rank)
      recv_ind = np.array(recv_ind)

      # save new common state, and restore to local state
      rng.switch_to_local()

      #DEBUG for r in range(len(status)):
	 #DEBUG print print_prefix, ": post-cloning status ", r, status[r]


      # create sending/receiving buffers
      #DEBUG print print_prefix, ": recv_rank ", recv_rank
      #DEBUG print print_prefix, ": recv_ind ", recv_ind
      #DEBUG print print_prefix, ": send_rank ", send_rank
      #DEBUG print print_prefix, ": send_ind ", send_ind
      # create sending/receiving buffers
      pos_send_buf=[None] * size
      vel_send_buf=[None] * size
      cell_send_buf=[None] * size
      for i in np.where(send_rank == rank)[0]:
	 r_recv = recv_rank[i]
	 i_send = send_ind[i]
	 #DEBUG print print_prefix, ": sending to ",r_recv," from index ",i_send
	 if pos_send_buf[r_recv] is None:
	    pos_send_buf[r_recv] = []
	 if vel_send_buf[r_recv] is None:
	    vel_send_buf[r_recv] = []
	 if cell_send_buf[r_recv] is None:
	    cell_send_buf[r_recv] = []
	 pos_send_buf[r_recv].append(walkers[i_send].get_positions())
	 vel_send_buf[r_recv].append(walkers[i_send].get_velocities())
	 cell_send_buf[r_recv].append(walkers[i_send].get_cell())

      #DEBUG print print_prefix, ": pos_send_buf ", pos_send_buf
      #DEBUG print print_prefix, ": vel_send_buf ", vel_send_buf
      #DEBUG print print_prefix, ": cell_send_buf ", cell_send_buf

      # do communication
      if comm is not None:
	 pos_recv_buf = comm.alltoall(pos_send_buf)
	 vel_recv_buf = comm.alltoall(vel_send_buf)
	 cell_recv_buf = comm.alltoall(cell_send_buf)
      else:
	 pos_recv_buf = pos_send_buf
	 vel_recv_buf = vel_send_buf
	 cell_recv_buf = cell_send_buf

      # copy from receive buffers into walkers structure
      my_recv_ind = np.array(recv_ind)[np.where(np.array(recv_rank) == rank)[0]]
      #DEBUG print print_prefix, ": my_recv_ind ", my_recv_ind
      recv_i = 0
      for (pos_array, vel_array, cell_array) in zip(pos_recv_buf, vel_recv_buf, cell_recv_buf):
	 #DEBUG print print_prefix, ": received pos_array from rank", pos_array 
	 #DEBUG print print_prefix, ": received cell_array from rank", cell_array 
	 if pos_array is not None:
	    for (pos_entry, vel_entry, cell_entry) in zip(pos_array, vel_array, cell_array):
	       #DEBUG print print_prefix, ": pos_entry ",pos_entry
	       #DEBUG print print_prefix, ": cell_entry ",cell_entry
	       #DEBUG print print_prefix, ": copying received config to index ",my_recv_ind[recv_i]
	       walkers[my_recv_ind[recv_i]].set_positions(pos_entry)
	       walkers[my_recv_ind[recv_i]].set_velocities(vel_entry)
	       walkers[my_recv_ind[recv_i]].set_cell(cell_entry)
	       walkers[my_recv_ind[recv_i]].info['ns_energy'] = eval_energy(walkers[my_recv_ind[recv_i]])
	       recv_i += 1

      if ns_args['debug'] >= 20:
	 print print_prefix, ": LOOP_PE POST_CLONE 20 ",i_ns_step, [ eval_energy(at, True) for at in walkers ]

      # move cloned walkers
      #DEBUG for at in walkers:
	#DEBUG print print_prefix, ": pre-move walkers", at.get_positions()[0]
      #DEBUG print print_prefix, ": pre-move energies", [ eval_energy(at) for at in walkers ]

      # walk clone targets
      #DEBUG print print_prefix, ": status[rank,:] ",status[rank,:]
      if ns_args['debug'] >= 5:
	 for i in np.where(status[rank,:] == 'c_s')[0]:
	    print "WALK source ", rank, i
      clone_walk_ind = np.where(status[rank,:] == 'c_t_a')[0]
      for i_at in clone_walk_ind:
	 #DEBUG print print_prefix, ": walk clone ", i_at
	 if ns_args['debug'] >= 5:
	    print "WALK target ", rank, i_at
	 (atom_accept_rate, cell_accept_rate) = walk_single_walker(walkers[i_at], movement_args, Emax_of_step)
	 accept_rate_n += 1
	 if atom_accept_rate is not None:
	    if atom_accept_rate_sum is None:
	       atom_accept_rate_sum = atom_accept_rate
	    else:
	       atom_accept_rate_sum += atom_accept_rate
	 if cell_accept_rate is not None:
	    if cell_accept_rate_sum is None:
	       cell_accept_rate_sum = cell_accept_rate
	    else:
	       cell_accept_rate_sum += cell_accept_rate

      # check that everything that should have been changed has, and things that shouldn't have, haven't
      if ns_args['debug'] >= 10:
	 final_PE_loc = [ eval_energy(at, True) for at in walkers ]
	 final_PE = np.array(comm.allgather(final_PE_loc)).flatten()
	 if rank == 0:
	    final_status = status.flatten()
	    for e in initial_unchanged:
	       if e not in final_PE:
		  print "initial_PE ", initial_PE
		  print "final_PE ", final_PE
		  print "final_status ", final_status
		  print "WARNING: energy that should have been unchanged ", e," missing from final energies"
	    for e in initial_changed:
	       if e in final_PE:
		  print "initial_PE ", initial_PE
		  print "final_PE ", final_PE
		  print "final_status ", final_status
		  print "WARNING: energy that should have been changed ", e," still there in final energies"

      #DEBUG print print_prefix, ": before extra walks # ", max_n_cull_per_task - len(clone_walk_ind)
      #DEBUG print print_prefix, ": before extra walks status ", status[rank, r_i]

      # walk extras
      if not ns_args['no_extra_walks_at_all']:
	 for ii in range(max_n_cull_per_task - len(clone_walk_ind)+n_extra_walk_per_task):
	    r_i = rng.int_uniform(0, n_walkers)
	    while status[rank,r_i] != '' and status[rank,r_i] != 'c_s':
	       r_i = rng.int_uniform(0, n_walkers)
	    #DEBUG print print_prefix, ": walk extra ", r_i # DEBUG
	    if ns_args['debug'] >= 5:
	       print "WALK extra ",rank, r_i
	    (atom_accept_rate, cell_accept_rate) = walk_single_walker(walkers[r_i], movement_args, Emax_of_step)
	    accept_rate_n += 1
	    if atom_accept_rate is not None:
	       if atom_accept_rate_sum is None:
		  atom_accept_rate_sum = atom_accept_rate
	       else:
		  atom_accept_rate_sum += atom_accept_rate
	    if cell_accept_rate is not None:
	       if cell_accept_rate_sum is None:
		  cell_accept_rate_sum = cell_accept_rate
	       else:
		  cell_accept_rate_sum += cell_accept_rate
	    # this status will be set only on this MPI task
	    status[rank,r_i] = 'e_w'

      if i_ns_step % abs(movement_args['MC_adjust_step_interval']) == abs(movement_args['MC_adjust_step_interval'])-1:
	 adjust_MC_steps(atom_accept_rate_sum, cell_accept_rate_sum, accept_rate_n, comm)
	 if atom_accept_rate_sum is not None:
	    atom_accept_rate_sum = 0.0
	 if cell_accept_rate_sum is not None:
	    cell_accept_rate_sum = 0.0
	 accept_rate_n = 0

      if ns_args['debug'] >= 20:
	 print print_prefix, ": LOOP_PE END 30 ",i_ns_step, [ eval_energy(at,True) for at in walkers ]
	 print print_prefix, ": LOOP_TE END 31 ",i_ns_step, [ eval_energy(at) for at in walkers ]

      if ns_args['debug'] >= 30:
	 for r in range(len(status)):
	    print print_prefix, ": final status ", r, [ s for s in status[r,:] ]

      if ns_args['snapshot_interval'] > 0 and i_ns_step % ns_args['snapshot_interval'] == ns_args['snapshot_interval']-1:
	 if have_quippy:
	    snapshot_io = quippy.CInOutput(ns_args['out_file_prefix']+'snapshot.%d.%d.xyz' % (i_ns_step,rank), action=quippy.OUTPUT)
	    for at in walkers:
		  at.write(snapshot_io)
	    snapshot_io.close()
	 else:
	    exit_error("Need some non-quippy way of writing trajectory\n",3)
	 global prev_snapshot_iter
	 if prev_snapshot_iter is not None:
	    os.remove(ns_args['out_file_prefix']+'snapshot.%d.%d.xyz' % (prev_snapshot_iter, rank))
	    os.remove(ns_args['out_file_prefix']+'snapshot.%d.%d.xyz.idx' % (prev_snapshot_iter, rank))
	 prev_snapshot_iter = i_ns_step

      #DEBUG for at in walkers:
	#DEBUG print print_prefix, ": post-move walkers", at.get_positions()[0]
      #DEBUG print print_prefix, ": post-move energies", [ eval_energy(at) for at in walkers ]

traj_io = quippy.CInOutput(ns_args['out_file_prefix']+'traj.%d.xyz' % rank, action=quippy.OUTPUT)
if rank == 0:
   energy_io = open(ns_args['out_file_prefix']+'energies', 'w')

if ns_args['profile'] == rank:
   import cProfile
   cProfile.run('do_ns_loop()','stats')
else:
   do_ns_loop()

# cleanup post loop
if have_quippy:
   snapshot_io = quippy.CInOutput(ns_args['out_file_prefix']+'snapshot.final.%d.xyz' % rank, action=quippy.OUTPUT)
   for at in walkers:
	 at.write(snapshot_io)
   snapshot_io.close()
else:
   exit_error("Need some non-quippy way of writing trajectory\n",3)
if prev_snapshot_iter is not None:
   os.remove(ns_args['out_file_prefix']+'snapshot.%d.%d.xyz' % (prev_snapshot_iter, rank))

for at in walkers:
   print rank, ": final energy ", at.info['ns_energy']

if rank == 0:
   energy_io.close()
traj_io.close()

if comm is not None:
   MPI.Finalize()
sys.exit(0)
